@using LeaveManagementSystem.Web.Services.LeaveRequests
@model IEnumerable<LeaveRequestReadOnlyVM>
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Leave Requests List";
   
}
<h1>Index</h1>

<p>
    @* normal blue *@
    <a asp-action="Create" class="btn btn-primary">Request Leave</a>
</p>
<table class="table">
    <thead>
        <tr>
            @* it will look for the name in the displayname in the view model *@
            <th>
                @Html.DisplayNameFor(model => model.LeaveType)
            </th>
              <th>
                @Html.DisplayNameFor(model => model.StartDate)
            </th>
              <th>
                @Html.DisplayNameFor(model => model.EndDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.NumberOfDays)
            </th>
            <th>
				@Html.DisplayNameFor(model => model.LeaveRequestStatus)
			</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
			var className = string.Empty;
            if (item.LeaveRequestStatus == LeaveRequestStatusEnum.Pending)
            {
                className = "warning";
            }
            else if (item.LeaveRequestStatus == LeaveRequestStatusEnum.Approved)
            {
                className = "success";
            }
            else if (item.LeaveRequestStatus == LeaveRequestStatusEnum.Declined)
            {
                className = "danger";
            }
            else if (item.LeaveRequestStatus == LeaveRequestStatusEnum.Cancelled)
            {
				className = "dark";
            }
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.LeaveType)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StartDate)
                </td>
                <td>
					@Html.DisplayFor(modelItem => item.EndDate)
				</td>
                <td>
					@Html.DisplayFor(modelItem => item.NumberOfDays)
				</td>
                <td>
					<span class="badge rounded-pill bg-@className">@item.LeaveRequestStatus.ToString()</span>
                </td>
                <td>
                    
                    @*                  
                    We discussed that any time you have a feature that's going to augment data in the system, 
                    do not just create a URL that goes to some action to just trigger some very detrimental system change.
                    Always try and wrap it inside of a form.    
                    *@

                    @* 
                    The downside to that form.
                    For every leave request that is pending,
                    we're actually going to have that form being generated.    
                    And I don't know if you really want 50 forms on the page.      
                   *@

                    @if (item.LeaveRequestStatus == LeaveRequestStatusEnum.Pending)
                    {
                       <button data-id="@item.Id" class="btn btn-danger cancelBtn">Cancel</button>
                      
                     @* 
                      <form asp-action="Cancel">
                            <input type="hidden" asp-for="@item.Id" name="id" />
                            <input class="btn btn-danger" type="submit" value="Cancel" />
						</form> 
                    *@

					}
                </td>
            </tr>
        }
    </tbody>
</table>

@*                            
asp-for="@item.Id" and the name is literally item.id       
So I'm going to override that name value to match the parameter in the cancel method 

a cancel button that performs an action 
(like canceling a request or deleting data on the server)                             
should be inside a <form>                            
*@

<form id="cancelForm" asp-action="Cancel">
    <input type="hidden" name="id" id="leaveRequestId" />
</form>

@section Scripts {
    <script>
        $(function(){
            $('.cancelBtn').click(
                function(e)
                {
                    
                    swal({
                        title:"Are you sure?",
						text:"Are you sure you want to cancel this leave request?",
                        icon:"warning",
                        buttons: true, // Show confirm/cancel buttons
                        dangerMode: true,// Emphasize danger (red color)
                    }).then((confirm)=>{
                        if(confirm)
                        {
                             // Get the button that was clicked
                            var btn=$(this);
                            
                            // Read the data-id attribute based on the button you clicked (leave request ID)
                            var id=btn.data('id');
                            
                            //setting the hidden field's value of the single form as the leave request's ID (item.Id of the row you clicked).
                            $('#leaveRequestId').val(id);
                            
                            // Submit the form to the server
                            $('#cancelForm').submit();
						}
                    });
                    
                
                }
            );
        });
    </script>
}

@*
With this approach,You have only one form in the whole page.
When a user clicks "Cancel" for any row, JavaScript sets the leave request ID in the single hidden input and submits the same form. 
*@